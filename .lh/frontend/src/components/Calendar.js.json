{
    "sourceFile": "frontend/src/components/Calendar.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1744023140966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744023150307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+import React, { useState, useEffect } from 'react';\n+import FullCalendar from '@fullcalendar/react';\n+import dayGridPlugin from '@fullcalendar/daygrid';\n+import interactionPlugin from '@fullcalendar/interaction';\n+im\n+import axios from 'axios';\n+import './Calendar.css';\n+\n+const Calendar = () => {\n+  const [events, setEvents] = useState([]);\n+  const [isModalOpen, setIsModalOpen] = useState(false);\n+  const [newEvent, setNewEvent] = useState({\n+    title: '',\n+    destinationId: '',\n+    start: '',\n+    end: '',\n+  });\n+  const [destinations, setDestinations] = useState([]);\n+\n+  useEffect(() => {\n+    // Fetch destinations for the dropdown\n+    axios.get('http://localhost:8000/api/destinations')\n+      .then(response => setDestinations(response.data))\n+      .catch(error => console.error('Error fetching destinations:', error));\n+  }, []);\n+\n+  const handleDateSelect = (selectInfo) => {\n+    setNewEvent({\n+      ...newEvent,\n+      start: selectInfo.startStr,\n+      end: selectInfo.endStr,\n+    });\n+    setIsModalOpen(true);\n+  };\n+\n+  const handleEventAdd = async () => {\n+    try {\n+      const response = await axios.post('http://localhost:8000/api/events', newEvent);\n+      setEvents([...events, response.data]);\n+      setIsModalOpen(false);\n+      setNewEvent({ title: '', destinationId: '', start: '', end: '' });\n+    } catch (error) {\n+      console.error('Error adding event:', error);\n+    }\n+  };\n+\n+  const handleEventClick = (clickInfo) => {\n+    navigate(`/event/${clickInfo.event.id}`);\n+  };\n+\n+  return (\n+    <div className=\"calendar-container\">\n+      <div className=\"calendar-header\">\n+        <h1>Trip Calendar</h1>\n+      </div>\n+      \n+      <FullCalendar\n+        eventClick={handleEventClick}\n+        plugins={[dayGridPlugin, interactionPlugin]}\n+        initialView=\"dayGridMonth\"\n+        selectable={true}\n+        select={handleDateSelect}\n+        events={events}\n+        headerToolbar={{\n+          left: 'prev,next today',\n+          center: 'title',\n+          right: 'dayGridMonth,dayGridWeek'\n+        }}\n+      />\n+\n+      {isModalOpen && (\n+        <div className=\"modal-overlay\">\n+          <div className=\"modal-content\">\n+            <h2>Add New Trip</h2>\n+            <form onSubmit={(e) => { e.preventDefault(); handleEventAdd(); }}>\n+              <div className=\"form-group\">\n+                <label>Trip Title:</label>\n+                <input\n+                  type=\"text\"\n+                  value={newEvent.title}\n+                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n+                  required\n+                />\n+              </div>\n+              \n+              <div className=\"form-group\">\n+                <label>Destination:</label>\n+                <select\n+                  value={newEvent.destinationId}\n+                  onChange={(e) => setNewEvent({ ...newEvent, destinationId: e.target.value })}\n+                  required\n+                >\n+                  <option value=\"\">Select a destination</option>\n+                  {destinations.map(dest => (\n+                    <option key={dest._id} value={dest._id}>\n+                      {dest.name}\n+                    </option>\n+                  ))}\n+                </select>\n+              </div>\n+\n+              <div className=\"modal-buttons\">\n+                <button type=\"submit\" className=\"save-button\">Save Trip</button>\n+                <button \n+                  type=\"button\" \n+                  className=\"cancel-button\"\n+                  onClick={() => setIsModalOpen(false)}\n+                >\n+                  Cancel\n+                </button>\n+              </div>\n+            </form>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default Calendar;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744023226231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+import React, { useState, useEffect } from 'react';\n+import FullCalendar from '@fullcalendar/react';\n+import dayGridPlugin from '@fullcalendar/daygrid';\n+import interactionPlugin from '@fullcalendar/interaction';\n+\n+import axios from 'axios';\n+import './Calendar.css';\n+\n+const Calendar = () => {\n+  const [events, setEvents] = useState([]);\n+  const [isModalOpen, setIsModalOpen] = useState(false);\n+  const [newEvent, setNewEvent] = useState({\n+    title: '',\n+    destinationId: '',\n+    start: '',\n+    end: '',\n+  });\n+  const [destinations, setDestinations] = useState([]);\n+\n+  useEffect(() => {\n+    // Fetch destinations for the dropdown\n+    axios.get('http://localhost:8000/api/destinations')\n+      .then(response => setDestinations(response.data))\n+      .catch(error => console.error('Error fetching destinations:', error));\n+  }, []);\n+\n+  const handleDateSelect = (selectInfo) => {\n+    setNewEvent({\n+      ...newEvent,\n+      start: selectInfo.startStr,\n+      end: selectInfo.endStr,\n+    });\n+    setIsModalOpen(true);\n+  };\n+\n+  const handleEventAdd = async () => {\n+    try {\n+      const response = await axios.post('http://localhost:8000/api/events', newEvent);\n+      setEvents([...events, response.data]);\n+      setIsModalOpen(false);\n+      setNewEvent({ title: '', destinationId: '', start: '', end: '' });\n+    } catch (error) {\n+      console.error('Error adding event:', error);\n+    }\n+  };\n+\n+  const handleEventClick = (clickInfo) => {\n+    navigate(`/event/${clickInfo.event.id}`);\n+  };\n+\n+  return (\n+    <div className=\"calendar-container\">\n+      <div className=\"calendar-header\">\n+        <h1>Trip Calendar</h1>\n+      </div>\n+      \n+      <FullCalendar\n+        eventClick={handleEventClick}\n+        plugins={[dayGridPlugin, interactionPlugin]}\n+        initialView=\"dayGridMonth\"\n+        selectable={true}\n+        select={handleDateSelect}\n+        events={events}\n+        headerToolbar={{\n+          left: 'prev,next today',\n+          center: 'title',\n+          right: 'dayGridMonth,dayGridWeek'\n+        }}\n+      />\n+\n+      {isModalOpen && (\n+        <div className=\"modal-overlay\">\n+          <div className=\"modal-content\">\n+            <h2>Add New Trip</h2>\n+            <form onSubmit={(e) => { e.preventDefault(); handleEventAdd(); }}>\n+              <div className=\"form-group\">\n+                <label>Trip Title:</label>\n+                <input\n+                  type=\"text\"\n+                  value={newEvent.title}\n+                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n+                  required\n+                />\n+              </div>\n+              \n+              <div className=\"form-group\">\n+                <label>Destination:</label>\n+                <select\n+                  value={newEvent.destinationId}\n+                  onChange={(e) => setNewEvent({ ...newEvent, destinationId: e.target.value })}\n+                  required\n+                >\n+                  <option value=\"\">Select a destination</option>\n+                  {destinations.map(dest => (\n+                    <option key={dest._id} value={dest._id}>\n+                      {dest.name}\n+                    </option>\n+                  ))}\n+                </select>\n+              </div>\n+\n+              <div className=\"modal-buttons\">\n+                <button type=\"submit\" className=\"save-button\">Save Trip</button>\n+                <button \n+                  type=\"button\" \n+                  className=\"cancel-button\"\n+                  onClick={() => setIsModalOpen(false)}\n+                >\n+                  Cancel\n+                </button>\n+              </div>\n+            </form>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default Calendar;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744023234358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,121 @@\n+import React, { useState, useEffect } from 'react';\n+import FullCalendar from '@fullcalendar/react';\n+import dayGridPlugin from '@fullcalendar/daygrid';\n+import interactionPlugin from '@fullcalendar/interaction';\n+import { useNavigate } from 'react-router-dom';\n+import axios from 'axios';\n+import './Calendar.css';\n+\n+const Calendar = () => {\n+  \n+  const [events, setEvents] = useState([]);\n+  const [isModalOpen, setIsModalOpen] = useState(false);\n+  const [newEvent, setNewEvent] = useState({\n+    title: '',\n+    destinationId: '',\n+    start: '',\n+    end: '',\n+  });\n+  const [destinations, setDestinations] = useState([]);\n+\n+  useEffect(() => {\n+    // Fetch destinations for the dropdown\n+    axios.get('http://localhost:8000/api/destinations')\n+      .then(response => setDestinations(response.data))\n+      .catch(error => console.error('Error fetching destinations:', error));\n+  }, []);\n+\n+  const handleDateSelect = (selectInfo) => {\n+    setNewEvent({\n+      ...newEvent,\n+      start: selectInfo.startStr,\n+      end: selectInfo.endStr,\n+    });\n+    setIsModalOpen(true);\n+  };\n+\n+  const handleEventAdd = async () => {\n+    try {\n+      const response = await axios.post('http://localhost:8000/api/events', newEvent);\n+      setEvents([...events, response.data]);\n+      setIsModalOpen(false);\n+      setNewEvent({ title: '', destinationId: '', start: '', end: '' });\n+    } catch (error) {\n+      console.error('Error adding event:', error);\n+    }\n+  };\n+\n+  const handleEventClick = (clickInfo) => {\n+    navigate(`/event/${clickInfo.event.id}`);\n+  };\n+\n+  return (\n+    <div className=\"calendar-container\">\n+      <div className=\"calendar-header\">\n+        <h1>Trip Calendar</h1>\n+      </div>\n+      \n+      <FullCalendar\n+        eventClick={handleEventClick}\n+        plugins={[dayGridPlugin, interactionPlugin]}\n+        initialView=\"dayGridMonth\"\n+        selectable={true}\n+        select={handleDateSelect}\n+        events={events}\n+        headerToolbar={{\n+          left: 'prev,next today',\n+          center: 'title',\n+          right: 'dayGridMonth,dayGridWeek'\n+        }}\n+      />\n+\n+      {isModalOpen && (\n+        <div className=\"modal-overlay\">\n+          <div className=\"modal-content\">\n+            <h2>Add New Trip</h2>\n+            <form onSubmit={(e) => { e.preventDefault(); handleEventAdd(); }}>\n+              <div className=\"form-group\">\n+                <label>Trip Title:</label>\n+                <input\n+                  type=\"text\"\n+                  value={newEvent.title}\n+                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n+                  required\n+                />\n+              </div>\n+              \n+              <div className=\"form-group\">\n+                <label>Destination:</label>\n+                <select\n+                  value={newEvent.destinationId}\n+                  onChange={(e) => setNewEvent({ ...newEvent, destinationId: e.target.value })}\n+                  required\n+                >\n+                  <option value=\"\">Select a destination</option>\n+                  {destinations.map(dest => (\n+                    <option key={dest._id} value={dest._id}>\n+                      {dest.name}\n+                    </option>\n+                  ))}\n+                </select>\n+              </div>\n+\n+              <div className=\"modal-buttons\">\n+                <button type=\"submit\" className=\"save-button\">Save Trip</button>\n+                <button \n+                  type=\"button\" \n+                  className=\"cancel-button\"\n+                  onClick={() => setIsModalOpen(false)}\n+                >\n+                  Cancel\n+                </button>\n+              </div>\n+            </form>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default Calendar;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744023555886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,9 @@\n   };\n \n   return (\n     <div className=\"calendar-container\">\n+      \n       <div className=\"calendar-header\">\n         <h1>Trip Calendar</h1>\n       </div>\n       \n"
                },
                {
                    "date": 1744023561335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,12 @@\n import interactionPlugin from '@fullcalendar/interaction';\n import { useNavigate } from 'react-router-dom';\n import axios from 'axios';\n import './Calendar.css';\n+import Navbar from './Navbar';\n \n const Calendar = () => {\n-  \n+  const navigate = useNavigate();\n   const [events, setEvents] = useState([]);\n   const [isModalOpen, setIsModalOpen] = useState(false);\n   const [newEvent, setNewEvent] = useState({\n     title: '',\n@@ -50,9 +51,9 @@\n   };\n \n   return (\n     <div className=\"calendar-container\">\n-      \n+      <Navbar />\n       <div className=\"calendar-header\">\n         <h1>Trip Calendar</h1>\n       </div>\n       \n@@ -118,365 +119,5 @@\n     </div>\n   );\n };\n \n-export default Calendar;\n-import React, { useState, useEffect } from 'react';\n-import FullCalendar from '@fullcalendar/react';\n-import dayGridPlugin from '@fullcalendar/daygrid';\n-import interactionPlugin from '@fullcalendar/interaction';\n-\n-import axios from 'axios';\n-import './Calendar.css';\n-\n-const Calendar = () => {\n-  const [events, setEvents] = useState([]);\n-  const [isModalOpen, setIsModalOpen] = useState(false);\n-  const [newEvent, setNewEvent] = useState({\n-    title: '',\n-    destinationId: '',\n-    start: '',\n-    end: '',\n-  });\n-  const [destinations, setDestinations] = useState([]);\n-\n-  useEffect(() => {\n-    // Fetch destinations for the dropdown\n-    axios.get('http://localhost:8000/api/destinations')\n-      .then(response => setDestinations(response.data))\n-      .catch(error => console.error('Error fetching destinations:', error));\n-  }, []);\n-\n-  const handleDateSelect = (selectInfo) => {\n-    setNewEvent({\n-      ...newEvent,\n-      start: selectInfo.startStr,\n-      end: selectInfo.endStr,\n-    });\n-    setIsModalOpen(true);\n-  };\n-\n-  const handleEventAdd = async () => {\n-    try {\n-      const response = await axios.post('http://localhost:8000/api/events', newEvent);\n-      setEvents([...events, response.data]);\n-      setIsModalOpen(false);\n-      setNewEvent({ title: '', destinationId: '', start: '', end: '' });\n-    } catch (error) {\n-      console.error('Error adding event:', error);\n-    }\n-  };\n-\n-  const handleEventClick = (clickInfo) => {\n-    navigate(`/event/${clickInfo.event.id}`);\n-  };\n-\n-  return (\n-    <div className=\"calendar-container\">\n-      <div className=\"calendar-header\">\n-        <h1>Trip Calendar</h1>\n-      </div>\n-      \n-      <FullCalendar\n-        eventClick={handleEventClick}\n-        plugins={[dayGridPlugin, interactionPlugin]}\n-        initialView=\"dayGridMonth\"\n-        selectable={true}\n-        select={handleDateSelect}\n-        events={events}\n-        headerToolbar={{\n-          left: 'prev,next today',\n-          center: 'title',\n-          right: 'dayGridMonth,dayGridWeek'\n-        }}\n-      />\n-\n-      {isModalOpen && (\n-        <div className=\"modal-overlay\">\n-          <div className=\"modal-content\">\n-            <h2>Add New Trip</h2>\n-            <form onSubmit={(e) => { e.preventDefault(); handleEventAdd(); }}>\n-              <div className=\"form-group\">\n-                <label>Trip Title:</label>\n-                <input\n-                  type=\"text\"\n-                  value={newEvent.title}\n-                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n-                  required\n-                />\n-              </div>\n-              \n-              <div className=\"form-group\">\n-                <label>Destination:</label>\n-                <select\n-                  value={newEvent.destinationId}\n-                  onChange={(e) => setNewEvent({ ...newEvent, destinationId: e.target.value })}\n-                  required\n-                >\n-                  <option value=\"\">Select a destination</option>\n-                  {destinations.map(dest => (\n-                    <option key={dest._id} value={dest._id}>\n-                      {dest.name}\n-                    </option>\n-                  ))}\n-                </select>\n-              </div>\n-\n-              <div className=\"modal-buttons\">\n-                <button type=\"submit\" className=\"save-button\">Save Trip</button>\n-                <button \n-                  type=\"button\" \n-                  className=\"cancel-button\"\n-                  onClick={() => setIsModalOpen(false)}\n-                >\n-                  Cancel\n-                </button>\n-              </div>\n-            </form>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default Calendar;\n-import React, { useState, useEffect } from 'react';\n-import FullCalendar from '@fullcalendar/react';\n-import dayGridPlugin from '@fullcalendar/daygrid';\n-import interactionPlugin from '@fullcalendar/interaction';\n-im\n-import axios from 'axios';\n-import './Calendar.css';\n-\n-const Calendar = () => {\n-  const [events, setEvents] = useState([]);\n-  const [isModalOpen, setIsModalOpen] = useState(false);\n-  const [newEvent, setNewEvent] = useState({\n-    title: '',\n-    destinationId: '',\n-    start: '',\n-    end: '',\n-  });\n-  const [destinations, setDestinations] = useState([]);\n-\n-  useEffect(() => {\n-    // Fetch destinations for the dropdown\n-    axios.get('http://localhost:8000/api/destinations')\n-      .then(response => setDestinations(response.data))\n-      .catch(error => console.error('Error fetching destinations:', error));\n-  }, []);\n-\n-  const handleDateSelect = (selectInfo) => {\n-    setNewEvent({\n-      ...newEvent,\n-      start: selectInfo.startStr,\n-      end: selectInfo.endStr,\n-    });\n-    setIsModalOpen(true);\n-  };\n-\n-  const handleEventAdd = async () => {\n-    try {\n-      const response = await axios.post('http://localhost:8000/api/events', newEvent);\n-      setEvents([...events, response.data]);\n-      setIsModalOpen(false);\n-      setNewEvent({ title: '', destinationId: '', start: '', end: '' });\n-    } catch (error) {\n-      console.error('Error adding event:', error);\n-    }\n-  };\n-\n-  const handleEventClick = (clickInfo) => {\n-    navigate(`/event/${clickInfo.event.id}`);\n-  };\n-\n-  return (\n-    <div className=\"calendar-container\">\n-      <div className=\"calendar-header\">\n-        <h1>Trip Calendar</h1>\n-      </div>\n-      \n-      <FullCalendar\n-        eventClick={handleEventClick}\n-        plugins={[dayGridPlugin, interactionPlugin]}\n-        initialView=\"dayGridMonth\"\n-        selectable={true}\n-        select={handleDateSelect}\n-        events={events}\n-        headerToolbar={{\n-          left: 'prev,next today',\n-          center: 'title',\n-          right: 'dayGridMonth,dayGridWeek'\n-        }}\n-      />\n-\n-      {isModalOpen && (\n-        <div className=\"modal-overlay\">\n-          <div className=\"modal-content\">\n-            <h2>Add New Trip</h2>\n-            <form onSubmit={(e) => { e.preventDefault(); handleEventAdd(); }}>\n-              <div className=\"form-group\">\n-                <label>Trip Title:</label>\n-                <input\n-                  type=\"text\"\n-                  value={newEvent.title}\n-                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n-                  required\n-                />\n-              </div>\n-              \n-              <div className=\"form-group\">\n-                <label>Destination:</label>\n-                <select\n-                  value={newEvent.destinationId}\n-                  onChange={(e) => setNewEvent({ ...newEvent, destinationId: e.target.value })}\n-                  required\n-                >\n-                  <option value=\"\">Select a destination</option>\n-                  {destinations.map(dest => (\n-                    <option key={dest._id} value={dest._id}>\n-                      {dest.name}\n-                    </option>\n-                  ))}\n-                </select>\n-              </div>\n-\n-              <div className=\"modal-buttons\">\n-                <button type=\"submit\" className=\"save-button\">Save Trip</button>\n-                <button \n-                  type=\"button\" \n-                  className=\"cancel-button\"\n-                  onClick={() => setIsModalOpen(false)}\n-                >\n-                  Cancel\n-                </button>\n-              </div>\n-            </form>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n-export default Calendar;\n-import React, { useState, useEffect } from 'react';\n-import FullCalendar from '@fullcalendar/react';\n-import dayGridPlugin from '@fullcalendar/daygrid';\n-import interactionPlugin from '@fullcalendar/interaction';\n-\n-import axios from 'axios';\n-import './Calendar.css';\n-\n-const Calendar = () => {\n-  const [events, setEvents] = useState([]);\n-  const [isModalOpen, setIsModalOpen] = useState(false);\n-  const [newEvent, setNewEvent] = useState({\n-    title: '',\n-    destinationId: '',\n-    start: '',\n-    end: '',\n-  });\n-  const [destinations, setDestinations] = useState([]);\n-\n-  useEffect(() => {\n-    // Fetch destinations for the dropdown\n-    axios.get('http://localhost:8000/api/destinations')\n-      .then(response => setDestinations(response.data))\n-      .catch(error => console.error('Error fetching destinations:', error));\n-  }, []);\n-\n-  const handleDateSelect = (selectInfo) => {\n-    setNewEvent({\n-      ...newEvent,\n-      start: selectInfo.startStr,\n-      end: selectInfo.endStr,\n-    });\n-    setIsModalOpen(true);\n-  };\n-\n-  const handleEventAdd = async () => {\n-    try {\n-      const response = await axios.post('http://localhost:8000/api/events', newEvent);\n-      setEvents([...events, response.data]);\n-      setIsModalOpen(false);\n-      setNewEvent({ title: '', destinationId: '', start: '', end: '' });\n-    } catch (error) {\n-      console.error('Error adding event:', error);\n-    }\n-  };\n-\n-  const handleEventClick = (clickInfo) => {\n-    navigate(`/event/${clickInfo.event.id}`);\n-  };\n-\n-  return (\n-    <div className=\"calendar-container\">\n-      <div className=\"calendar-header\">\n-        <h1>Trip Calendar</h1>\n-      </div>\n-      \n-      <FullCalendar\n-        eventClick={handleEventClick}\n-        plugins={[dayGridPlugin, interactionPlugin]}\n-        initialView=\"dayGridMonth\"\n-        selectable={true}\n-        select={handleDateSelect}\n-        events={events}\n-        headerToolbar={{\n-          left: 'prev,next today',\n-          center: 'title',\n-          right: 'dayGridMonth,dayGridWeek'\n-        }}\n-      />\n-\n-      {isModalOpen && (\n-        <div className=\"modal-overlay\">\n-          <div className=\"modal-content\">\n-            <h2>Add New Trip</h2>\n-            <form onSubmit={(e) => { e.preventDefault(); handleEventAdd(); }}>\n-              <div className=\"form-group\">\n-                <label>Trip Title:</label>\n-                <input\n-                  type=\"text\"\n-                  value={newEvent.title}\n-                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n-                  required\n-                />\n-              </div>\n-              \n-              <div className=\"form-group\">\n-                <label>Destination:</label>\n-                <select\n-                  value={newEvent.destinationId}\n-                  onChange={(e) => setNewEvent({ ...newEvent, destinationId: e.target.value })}\n-                  required\n-                >\n-                  <option value=\"\">Select a destination</option>\n-                  {destinations.map(dest => (\n-                    <option key={dest._id} value={dest._id}>\n-                      {dest.name}\n-                    </option>\n-                  ))}\n-                </select>\n-              </div>\n-\n-              <div className=\"modal-buttons\">\n-                <button type=\"submit\" className=\"save-button\">Save Trip</button>\n-                <button \n-                  type=\"button\" \n-                  className=\"cancel-button\"\n-                  onClick={() => setIsModalOpen(false)}\n-                >\n-                  Cancel\n-                </button>\n-              </div>\n-            </form>\n-          </div>\n-        </div>\n-      )}\n-    </div>\n-  );\n-};\n-\n export default Calendar;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744024245590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n     // Fetch destinations for the dropdown\n     axios.get('http://localhost:8000/api/destinations')\n       .then(response => setDestinations(response.data))\n       .catch(error => console.error('Error fetching destinations:', error));\n+      \n   }, []);\n \n   const handleDateSelect = (selectInfo) => {\n     setNewEvent({\n"
                },
                {
                    "date": 1744024252508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,12 +24,12 @@\n     axios.get('http://localhost:8000/api/destinations')\n       .then(response => setDestinations(response.data))\n       .catch(error => console.error('Error fetching destinations:', error));\n \n-        // Fetch existing events\n-        axios.get('http://localhost:8000/api/events')\n-        .then(response => setEvents(response.data))\n-        .catch(error => console.error('Error fetching events:', error));\n+      // Fetch existing events\n+      axios.get('http://localhost:8000/api/events')\n+      .then(response => setEvents(response.data))\n+      .catch(error => console.error('Error fetching events:', error));\n   }, []);\n \n   const handleDateSelect = (selectInfo) => {\n     setNewEvent({\n"
                },
                {
                    "date": 1744024953382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,128 @@\n+import React, { useState, useEffect } from 'react';\n+import FullCalendar from '@fullcalendar/react';\n+import dayGridPlugin from '@fullcalendar/daygrid';\n+import interactionPlugin from '@fullcalendar/interaction';\n+import { useNavigate } from 'react-router-dom';\n+import axios from 'axios';\n+import './Calendar.css';\n+import Navbar from './Navbar';\n+\n+const Calendar = () => {\n+  const navigate = useNavigate();\n+  const [events, setEvents] = useState([]);\n+  const [isModalOpen, setIsModalOpen] = useState(false);\n+  const [newEvent, setNewEvent] = useState({\n+    title: '',\n+    destinationId: '',\n+    start: '',\n+    end: '',\n+  });\n+  const [destinations, setDestinations] = useState([]);\n+\n+  useEffect(() => {\n+    // Fetch destinations for the dropdown\n+    axios.get('http://localhost:8000/api/destinations')\n+      .then(response => setDestinations(response.data))\n+      .catch(error => console.error('Error fetching destinations:', error));\n+\n+    // Fetch existing events\n+    axios.get('http://localhost:8000/api/events')\n+    .then(response => setEvents(response.data))\n+    .catch(error => console.error('Error fetching events:', error));\n+  }, []);\n+\n+  const handleDateSelect = (selectInfo) => {\n+    setNewEvent({\n+      ...newEvent,\n+      start: selectInfo.start.toISOString().split('T')[0],\n+      end: selectInfo.end.toISOString().split('T')[0],\n+    });\n+    setIsModalOpen(true);\n+  };\n+\n+  const handleEventAdd = async () => {\n+    try {\n+      const response = await axios.post('http://localhost:8000/api/events', newEvent);\n+      setEvents([...events, response.data]);\n+      setIsModalOpen(false);\n+      setNewEvent({ title: '', destinationId: '', start: '', end: '' });\n+    } catch (error) {\n+      console.error('Error adding event:', error);\n+    }\n+  };\n+\n+  const handleEventClick = (clickInfo) => {\n+    navigate(`/event/${clickInfo.event.id}`);\n+  };\n+\n+  return (\n+    <div className=\"calendar-container\">\n+      <Navbar />\n+      <div className=\"calendar-header\">\n+        <h1>Trip Calendar</h1>\n+      </div>\n+      \n+      <FullCalendar\n+        eventClick={handleEventClick}\n+        plugins={[dayGridPlugin, interactionPlugin]}\n+        initialView=\"dayGridMonth\"\n+        selectable={true}\n+        select={handleDateSelect}\n+        events={events}\n+        headerToolbar={{\n+          left: 'prev,next today',\n+          center: 'title',\n+          right: 'dayGridMonth,dayGridWeek'\n+        }}\n+      />\n+\n+      {isModalOpen && (\n+        <div className=\"modal-overlay\">\n+          <div className=\"modal-content\">\n+            <h2>Add New Trip</h2>\n+            <form onSubmit={(e) => { e.preventDefault(); handleEventAdd(); }}>\n+              <div className=\"form-group\">\n+                <label>Trip Title:</label>\n+                <input\n+                  type=\"text\"\n+                  value={newEvent.title}\n+                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n+                  required\n+                />\n+              </div>\n+              \n+              <div className=\"form-group\">\n+                <label>Destination:</label>\n+                <select\n+                  value={newEvent.destinationId}\n+                  onChange={(e) => setNewEvent({ ...newEvent, destinationId: e.target.value })}\n+                  required\n+                >\n+                  <option value=\"\">Select a destination</option>\n+                  {destinations.map(dest => (\n+                    <option key={dest._id} value={dest._id}>\n+                      {dest.name}\n+                    </option>\n+                  ))}\n+                </select>\n+              </div>\n+\n+              <div className=\"modal-buttons\">\n+                <button type=\"submit\" className=\"save-button\">Save Trip</button>\n+                <button \n+                  type=\"button\" \n+                  className=\"cancel-button\"\n+                  onClick={() => setIsModalOpen(false)}\n+                >\n+                  Cancel\n+                </button>\n+              </div>\n+            </form>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default Calendar;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1744023140966,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction';\n\nimport axios from 'axios';\nimport './Calendar.css';\n\nconst Calendar = () => {\n  const [events, setEvents] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [newEvent, setNewEvent] = useState({\n    title: '',\n    destinationId: '',\n    start: '',\n    end: '',\n  });\n  const [destinations, setDestinations] = useState([]);\n\n  useEffect(() => {\n    // Fetch destinations for the dropdown\n    axios.get('http://localhost:8000/api/destinations')\n      .then(response => setDestinations(response.data))\n      .catch(error => console.error('Error fetching destinations:', error));\n  }, []);\n\n  const handleDateSelect = (selectInfo) => {\n    setNewEvent({\n      ...newEvent,\n      start: selectInfo.startStr,\n      end: selectInfo.endStr,\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleEventAdd = async () => {\n    try {\n      const response = await axios.post('http://localhost:8000/api/events', newEvent);\n      setEvents([...events, response.data]);\n      setIsModalOpen(false);\n      setNewEvent({ title: '', destinationId: '', start: '', end: '' });\n    } catch (error) {\n      console.error('Error adding event:', error);\n    }\n  };\n\n  const handleEventClick = (clickInfo) => {\n    navigate(`/event/${clickInfo.event.id}`);\n  };\n\n  return (\n    <div className=\"calendar-container\">\n      <div className=\"calendar-header\">\n        <h1>Trip Calendar</h1>\n      </div>\n      \n      <FullCalendar\n        eventClick={handleEventClick}\n        plugins={[dayGridPlugin, interactionPlugin]}\n        initialView=\"dayGridMonth\"\n        selectable={true}\n        select={handleDateSelect}\n        events={events}\n        headerToolbar={{\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,dayGridWeek'\n        }}\n      />\n\n      {isModalOpen && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <h2>Add New Trip</h2>\n            <form onSubmit={(e) => { e.preventDefault(); handleEventAdd(); }}>\n              <div className=\"form-group\">\n                <label>Trip Title:</label>\n                <input\n                  type=\"text\"\n                  value={newEvent.title}\n                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n                  required\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label>Destination:</label>\n                <select\n                  value={newEvent.destinationId}\n                  onChange={(e) => setNewEvent({ ...newEvent, destinationId: e.target.value })}\n                  required\n                >\n                  <option value=\"\">Select a destination</option>\n                  {destinations.map(dest => (\n                    <option key={dest._id} value={dest._id}>\n                      {dest.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"modal-buttons\">\n                <button type=\"submit\" className=\"save-button\">Save Trip</button>\n                <button \n                  type=\"button\" \n                  className=\"cancel-button\"\n                  onClick={() => setIsModalOpen(false)}\n                >\n                  Cancel\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Calendar;"
        }
    ]
}