{
    "sourceFile": "frontend/src/components/Calender.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1744015600317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744022906597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+import React, { useState, useEffect } from 'react';\n+import FullCalendar from '@fullcalendar/react';\n+import dayGridPlugin from '@fullcalendar/daygrid';\n+import interactionPlugin from '@fullcalendar/interaction';\n+import axios from 'axios';\n+import './Calendar.css';\n+\n+const Calendar = () => {\n+  const [events, setEvents] = useState([]);\n+  const [isModalOpen, setIsModalOpen] = useState(false);\n+  const [newEvent, setNewEvent] = useState({\n+    title: '',\n+    destinationId: '',\n+    start: '',\n+    end: '',\n+  });\n+  const [destinations, setDestinations] = useState([]);\n+\n+  useEffect(() => {\n+    // Fetch destinations for the dropdown\n+    axios.get('http://localhost:8000/api/destinations')\n+      .then(response => setDestinations(response.data))\n+      .catch(error => console.error('Error fetching destinations:', error));\n+  }, []);\n+\n+  const handleDateSelect = (selectInfo) => {\n+    setNewEvent({\n+      ...newEvent,\n+      start: selectInfo.startStr,\n+      end: selectInfo.endStr,\n+    });\n+    setIsModalOpen(true);\n+  };\n+\n+  const handleEventAdd = async () => {\n+    try {\n+      const response = await axios.post('http://localhost:8000/api/events', newEvent);\n+      setEvents([...events, response.data]);\n+      setIsModalOpen(false);\n+      setNewEvent({ title: '', destinationId: '', start: '', end: '' });\n+    } catch (error) {\n+      console.error('Error adding event:', error);\n+    }\n+  };\n+\n+  return (\n+    <div className=\"calendar-container\">\n+      <div className=\"calendar-header\">\n+        <h1>Trip Calendar</h1>\n+      </div>\n+      \n+      <FullCalendar\n+      \n+        plugins={[dayGridPlugin, interactionPlugin]}\n+        initialView=\"dayGridMonth\"\n+        selectable={true}\n+        select={handleDateSelect}\n+        events={events}\n+        headerToolbar={{\n+          left: 'prev,next today',\n+          center: 'title',\n+          right: 'dayGridMonth,dayGridWeek'\n+        }}\n+      />\n+\n+      {isModalOpen && (\n+        <div className=\"modal-overlay\">\n+          <div className=\"modal-content\">\n+            <h2>Add New Trip</h2>\n+            <form onSubmit={(e) => { e.preventDefault(); handleEventAdd(); }}>\n+              <div className=\"form-group\">\n+                <label>Trip Title:</label>\n+                <input\n+                  type=\"text\"\n+                  value={newEvent.title}\n+                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n+                  required\n+                />\n+              </div>\n+              \n+              <div className=\"form-group\">\n+                <label>Destination:</label>\n+                <select\n+                  value={newEvent.destinationId}\n+                  onChange={(e) => setNewEvent({ ...newEvent, destinationId: e.target.value })}\n+                  required\n+                >\n+                  <option value=\"\">Select a destination</option>\n+                  {destinations.map(dest => (\n+                    <option key={dest._id} value={dest._id}>\n+                      {dest.name}\n+                    </option>\n+                  ))}\n+                </select>\n+              </div>\n+\n+              <div className=\"modal-buttons\">\n+                <button type=\"submit\" className=\"save-button\">Save Trip</button>\n+                <button \n+                  type=\"button\" \n+                  className=\"cancel-button\"\n+                  onClick={() => setIsModalOpen(false)}\n+                >\n+                  Cancel\n+                </button>\n+              </div>\n+            </form>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default Calendar;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744022912427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,115 @@\n+import React, { useState, useEffect } from 'react';\n+import FullCalendar from '@fullcalendar/react';\n+import dayGridPlugin from '@fullcalendar/daygrid';\n+import interactionPlugin from '@fullcalendar/interaction';\n+import axios from 'axios';\n+import './Calendar.css';\n+\n+const Calendar = () => {\n+  const [events, setEvents] = useState([]);\n+  const [isModalOpen, setIsModalOpen] = useState(false);\n+  const [newEvent, setNewEvent] = useState({\n+    title: '',\n+    destinationId: '',\n+    start: '',\n+    end: '',\n+  });\n+  const [destinations, setDestinations] = useState([]);\n+\n+  useEffect(() => {\n+    // Fetch destinations for the dropdown\n+    axios.get('http://localhost:8000/api/destinations')\n+      .then(response => setDestinations(response.data))\n+      .catch(error => console.error('Error fetching destinations:', error));\n+  }, []);\n+\n+  const handleDateSelect = (selectInfo) => {\n+    setNewEvent({\n+      ...newEvent,\n+      start: selectInfo.startStr,\n+      end: selectInfo.endStr,\n+    });\n+    setIsModalOpen(true);\n+  };\n+\n+  const handleEventAdd = async () => {\n+    try {\n+      const response = await axios.post('http://localhost:8000/api/events', newEvent);\n+      setEvents([...events, response.data]);\n+      setIsModalOpen(false);\n+      setNewEvent({ title: '', destinationId: '', start: '', end: '' });\n+    } catch (error) {\n+      console.error('Error adding event:', error);\n+    }\n+  };\n+\n+  return (\n+    <div className=\"calendar-container\">\n+      <div className=\"calendar-header\">\n+        <h1>Trip Calendar</h1>\n+      </div>\n+      \n+      <FullCalendar\n+        cl\n+        plugins={[dayGridPlugin, interactionPlugin]}\n+        initialView=\"dayGridMonth\"\n+        selectable={true}\n+        select={handleDateSelect}\n+        events={events}\n+        headerToolbar={{\n+          left: 'prev,next today',\n+          center: 'title',\n+          right: 'dayGridMonth,dayGridWeek'\n+        }}\n+      />\n+\n+      {isModalOpen && (\n+        <div className=\"modal-overlay\">\n+          <div className=\"modal-content\">\n+            <h2>Add New Trip</h2>\n+            <form onSubmit={(e) => { e.preventDefault(); handleEventAdd(); }}>\n+              <div className=\"form-group\">\n+                <label>Trip Title:</label>\n+                <input\n+                  type=\"text\"\n+                  value={newEvent.title}\n+                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n+                  required\n+                />\n+              </div>\n+              \n+              <div className=\"form-group\">\n+                <label>Destination:</label>\n+                <select\n+                  value={newEvent.destinationId}\n+                  onChange={(e) => setNewEvent({ ...newEvent, destinationId: e.target.value })}\n+                  required\n+                >\n+                  <option value=\"\">Select a destination</option>\n+                  {destinations.map(dest => (\n+                    <option key={dest._id} value={dest._id}>\n+                      {dest.name}\n+                    </option>\n+                  ))}\n+                </select>\n+              </div>\n+\n+              <div className=\"modal-buttons\">\n+                <button type=\"submit\" className=\"save-button\">Save Trip</button>\n+                <button \n+                  type=\"button\" \n+                  className=\"cancel-button\"\n+                  onClick={() => setIsModalOpen(false)}\n+                >\n+                  Cancel\n+                </button>\n+              </div>\n+            </form>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default Calendar;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744022922342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+import React, { useState, useEffect } from 'react';\n+import FullCalendar from '@fullcalendar/react';\n+import dayGridPlugin from '@fullcalendar/daygrid';\n+import interactionPlugin from '@fullcalendar/interaction';\n+import axios from 'axios';\n+import './Calendar.css';\n+\n+const Calendar = () => {\n+  const [events, setEvents] = useState([]);\n+  const [isModalOpen, setIsModalOpen] = useState(false);\n+  const [newEvent, setNewEvent] = useState({\n+    title: '',\n+    destinationId: '',\n+    start: '',\n+    end: '',\n+  });\n+  const [destinations, setDestinations] = useState([]);\n+\n+  useEffect(() => {\n+    // Fetch destinations for the dropdown\n+    axios.get('http://localhost:8000/api/destinations')\n+      .then(response => setDestinations(response.data))\n+      .catch(error => console.error('Error fetching destinations:', error));\n+  }, []);\n+\n+  const handleDateSelect = (selectInfo) => {\n+    setNewEvent({\n+      ...newEvent,\n+      start: selectInfo.startStr,\n+      end: selectInfo.endStr,\n+    });\n+    setIsModalOpen(true);\n+  };\n+\n+  const handleEventAdd = async () => {\n+    try {\n+      const response = await axios.post('http://localhost:8000/api/events', newEvent);\n+      setEvents([...events, response.data]);\n+      setIsModalOpen(false);\n+      setNewEvent({ title: '', destinationId: '', start: '', end: '' });\n+    } catch (error) {\n+      console.error('Error adding event:', error);\n+    }\n+  };\n+  \n+\n+  return (\n+    <div className=\"calendar-container\">\n+      <div className=\"calendar-header\">\n+        <h1>Trip Calendar</h1>\n+      </div>\n+      \n+      <FullCalendar\n+        eventClick={handleEventClick}\n+        plugins={[dayGridPlugin, interactionPlugin]}\n+        initialView=\"dayGridMonth\"\n+        selectable={true}\n+        select={handleDateSelect}\n+        events={events}\n+        headerToolbar={{\n+          left: 'prev,next today',\n+          center: 'title',\n+          right: 'dayGridMonth,dayGridWeek'\n+        }}\n+      />\n+\n+      {isModalOpen && (\n+        <div className=\"modal-overlay\">\n+          <div className=\"modal-content\">\n+            <h2>Add New Trip</h2>\n+            <form onSubmit={(e) => { e.preventDefault(); handleEventAdd(); }}>\n+              <div className=\"form-group\">\n+                <label>Trip Title:</label>\n+                <input\n+                  type=\"text\"\n+                  value={newEvent.title}\n+                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n+                  required\n+                />\n+              </div>\n+              \n+              <div className=\"form-group\">\n+                <label>Destination:</label>\n+                <select\n+                  value={newEvent.destinationId}\n+                  onChange={(e) => setNewEvent({ ...newEvent, destinationId: e.target.value })}\n+                  required\n+                >\n+                  <option value=\"\">Select a destination</option>\n+                  {destinations.map(dest => (\n+                    <option key={dest._id} value={dest._id}>\n+                      {dest.name}\n+                    </option>\n+                  ))}\n+                </select>\n+              </div>\n+\n+              <div className=\"modal-buttons\">\n+                <button type=\"submit\" className=\"save-button\">Save Trip</button>\n+                <button \n+                  type=\"button\" \n+                  className=\"cancel-button\"\n+                  onClick={() => setIsModalOpen(false)}\n+                >\n+                  Cancel\n+                </button>\n+              </div>\n+            </form>\n+          </div>\n+        </div>\n+      )}\n+    </div>\n+  );\n+};\n+\n+export default Calendar;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1744015600317,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport axios from 'axios';\nimport './Calendar.css';\n\nconst Calendar = () => {\n  const [events, setEvents] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [newEvent, setNewEvent] = useState({\n    title: '',\n    destinationId: '',\n    start: '',\n    end: '',\n  });\n  const [destinations, setDestinations] = useState([]);\n\n  useEffect(() => {\n    // Fetch destinations for the dropdown\n    axios.get('http://localhost:8000/api/destinations')\n      .then(response => setDestinations(response.data))\n      .catch(error => console.error('Error fetching destinations:', error));\n  }, []);\n\n  const handleDateSelect = (selectInfo) => {\n    setNewEvent({\n      ...newEvent,\n      start: selectInfo.startStr,\n      end: selectInfo.endStr,\n    });\n    setIsModalOpen(true);\n  };\n\n  const handleEventAdd = async () => {\n    try {\n      const response = await axios.post('http://localhost:8000/api/events', newEvent);\n      setEvents([...events, response.data]);\n      setIsModalOpen(false);\n      setNewEvent({ title: '', destinationId: '', start: '', end: '' });\n    } catch (error) {\n      console.error('Error adding event:', error);\n    }\n  };\n\n  return (\n    <div className=\"calendar-container\">\n      <div className=\"calendar-header\">\n        <h1>Trip Calendar</h1>\n      </div>\n      \n      <FullCalendar\n        plugins={[dayGridPlugin, interactionPlugin]}\n        initialView=\"dayGridMonth\"\n        selectable={true}\n        select={handleDateSelect}\n        events={events}\n        headerToolbar={{\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,dayGridWeek'\n        }}\n      />\n\n      {isModalOpen && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <h2>Add New Trip</h2>\n            <form onSubmit={(e) => { e.preventDefault(); handleEventAdd(); }}>\n              <div className=\"form-group\">\n                <label>Trip Title:</label>\n                <input\n                  type=\"text\"\n                  value={newEvent.title}\n                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n                  required\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label>Destination:</label>\n                <select\n                  value={newEvent.destinationId}\n                  onChange={(e) => setNewEvent({ ...newEvent, destinationId: e.target.value })}\n                  required\n                >\n                  <option value=\"\">Select a destination</option>\n                  {destinations.map(dest => (\n                    <option key={dest._id} value={dest._id}>\n                      {dest.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"modal-buttons\">\n                <button type=\"submit\" className=\"save-button\">Save Trip</button>\n                <button \n                  type=\"button\" \n                  className=\"cancel-button\"\n                  onClick={() => setIsModalOpen(false)}\n                >\n                  Cancel\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Calendar;"
        }
    ]
}