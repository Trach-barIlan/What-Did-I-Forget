{
    "sourceFile": "backend/routes/authentication.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744050224933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744050224933,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst User = require('../models/User');\nconst jwt = require('jsonwebtoken');\n\n// Register\nrouter.post('/register', async (req, res) => {\n  try {\n    const { email, password, name } = req.body;\n\n    // Check if user exists\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return res.status(400).json({ message: 'User already exists' });\n    }\n\n    // Create new user\n    const user = new User({ email, password, name });\n    await user.save();\n\n    // Create token\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    });\n\n    res.status(201).json({\n      token,\n      user: {\n        id: user._id,\n        name: user.name,\n        email: user.email\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// Login\nrouter.post('/login', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    // Check if user exists\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Check password\n    const isMatch = await user.comparePassword(password);\n    if (!isMatch) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Create token\n    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    });\n\n    res.json({\n      token,\n      user: {\n        id: user._id,\n        name: user.name,\n        email: user.email\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n});\n\nmodule.exports = router;"
        }
    ]
}