{
    "sourceFile": "backend/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744015836946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744015845799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n const express = require('express');\n const mongoose = require('mongoose');\n const cors = require('cors');\n const destinationsRouter = require('./routes/destinations');\n+const eventsRouter = require('./routes/events');\n \n-\n const app = express();\n const port = 8000;\n \n // Apply CORS middleware first, before any routes\n@@ -22,8 +22,9 @@\n   .catch((err) => console.log('MongoDB connection error:', err));\n \n // Use the destinations routes\n app.use('/api/destinations', destinationsRouter);\n+app.use('/api/events', eventsRouter);\n \n // Start the server\n app.listen(port, () => {\n   console.log(`Server running on port ${port}`);\n"
                }
            ],
            "date": 1744015836946,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst destinationsRouter = require('./routes/destinations');\n\n\nconst app = express();\nconst port = 8000;\n\n// Apply CORS middleware first, before any routes\napp.use(cors());  // This simpler configuration should work for development\n\n// Use JSON middleware to parse incoming requests\napp.use(express.json());\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost:27017/destinationsdb', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n})\n  .then(() => console.log('MongoDB connected'))\n  .catch((err) => console.log('MongoDB connection error:', err));\n\n// Use the destinations routes\napp.use('/api/destinations', destinationsRouter);\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});"
        }
    ]
}